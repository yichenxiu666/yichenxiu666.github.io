{"pages":[],"posts":[{"title":"","text":"[toc] docker-compose一键部署typechodocker volume 持久化插件12345678910111213vim /etc/systemd/system/docker-volume-local-persist.service#文件内容为[Unit]Description=docker-volume-local-persistBefore=docker.serviceWants=docker.service[Service]TimeoutStartSec=0ExecStart=/usr/bin/docker-volume-local-persist[Install]WantedBy=multi-user.target 12345wget https://github.com/MatchbookLab/local-persist/releases/download/v1.3.0/local-persist-linux-amd64 chmod +x local-persist-linux-amd64 &amp;&amp; mv local-persist-linux-amd64 docker-volume-local-persist &amp;&amp; mv docker-volume-local-persist /usr/bin/systemctl daemon-reload &amp;&amp; systemctl enable docker-volume-local-persist &amp;&amp; systemctl start docker-volume-local-persist 安装docker12345678910yum install -y yum-utils device-mapper-persistent-data lvm2yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repoyum install -y docker-ce docker-ce-cli containerd.iosystemctl restart docker &amp;&amp; systemctl enable docker一、安装bash-completeyum install -y bash-completion二、刷新文件source /usr/share/bash-completion/completions/docker &amp;&amp; source /usr/share/bash-completion/bash_completion 安装docker-compose方法一： curl -L https://github.com/docker/compose/releases/download/1.26.0/docker-compose-`uname -s`-`uname -m` &gt; /usr/local/bin/docker-compose 或者： curl -L https://github.com/docker/compose/releases/download/1.21.2/docker-compose-$(uname -s)-$(uname -m) -o /usr/local/bin/docker-compose ​ chmod +x /usr/local/bin/docker-compose 查看版本信息 # docker-compose –version ​ 方法二： yum install -y epel-release yum -y install python-pip python-devel pip install docker-compose 如果报以下错误， 就直接安装这个就可以了 1pip install six --user -U 前提:已安装docker，域名已解析，已配置https,如没有域名 调整相关配置 支持端口转发 12echo &quot;net.ipv4.ip_forward = 1&quot; &gt;&gt; /etc/sysctl.conf sysctl -p 1mkdir /data/{app,back,typecho} -p &amp;&amp; cd /data/typecho 编写Dockerfile1234567vim DockerfileFROM php:7.2.3-fpmRUN apt-get updateRUN docker-php-ext-install pdo_mysql 保存Dockerfile 在typecho目录构建镜像 12docker build -t scofieldpeng/php:7.2.3-fpm . 创建docker编排文件 12cd /data/app/touch docker-compose.yml mysql文件夹，用来存放mysql数据，方便后期导出 1mkdir mysql mysql镜像的环境 1touch mysql.env nginx配置文件 1touch typecho.conf 克隆官方仓库 1git clone https://github.com/typecho/typecho.git mysql.env中的内容 123456789101112#MySQL的root用户默认密码，这里自行更改MYSQL_ROOT_PASSWORD=Mysqlpass#MySQL镜像创建时自动创建的数据库名称MYSQL_DATABASE=typecho#MySQL镜像创建时自动创建的用户名MYSQL_USER=typecho#MySQL镜像创建时自动创建的用户密码MYSQL_PASSWORD=Mysqlpass typecho.conf的内容为 按需求修改相关内容，ssl可以注释掉 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990server { listen 0.0.0.0:80; root /app; index index.php; server_name www.baidu.com baidu.com; rewrite ^ https://$server_name$request_uri? permanent; charset utf-8; access_log /var/log/nginx/typecho_access.log main; if (-f $request_filename/index.html){ rewrite (.*) $1/index.html break; } if (-f $request_filename/index.php){ rewrite (.*) $1/index.php; } if (!-f $request_filename){ rewrite (.*) /index.php; } location ~ .*\\.php(\\/.*)*$ { ##try_files $uri = 404; include fastcgi_params; fastcgi_param PATH_INFO $fastcgi_path_info; fastcgi_param PATH_TRANSLATED $document_root$fastcgi_path_info; fastcgi_param SCRIPT_NAME $fastcgi_script_name; fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name; fastcgi_index index.php; fastcgi_pass php-fpm:9000; }}server { listen 443 ssl; root /app; index index.php; server_name www.baidu.com baidu.com; ssl_certificate /etc/letsencrypt/live/www.baidu.com/fullchain.pem; ssl_certificate_key /etc/letsencrypt/live/www.baidu.com/privkey.pem; ssl_session_timeout 1d; ssl_session_cache shared:SSL:50m; ssl_session_tickets on; ssl_dhparam /etc/ssl/private/dhparam.pem; ssl_protocols TLSv1 TLSv1.1 TLSv1.2; ssl_ciphers 'ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-DSS-AES128-GCM-SHA256:kEDH+AESGCM:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA:ECDHE-ECDSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-DSS-AES128-SHA256:DHE-RSA-AES256-SHA256:DHE-DSS-AES256-SHA:DHE-RSA-AES256-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128:AES256:AES:DES-CBC3-SHA:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK'; ssl_prefer_server_ciphers on; access_log /var/log/nginx/typecho_access.log main; if (-f $request_filename/index.html){ rewrite (.*) $1/index.html break; } if (-f $request_filename/index.php){ rewrite (.*) $1/index.php; } if (!-f $request_filename){ rewrite (.*) /index.php; } location ~ .*\\.php(\\/.*)*$ { ##try_files $uri = 404; include fastcgi_params; fastcgi_param PATH_INFO $fastcgi_path_info; fastcgi_param PATH_TRANSLATED $document_root$fastcgi_path_info; fastcgi_param SCRIPT_NAME $fastcgi_script_name; fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name; fastcgi_index index.php; fastcgi_pass php-fpm:9000; }} docker-compose.yml中内容1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950version: '2'services: nginx: image: nginx:1.13.9-alpine container_name: app_nginx ports: - &quot;80:80&quot; - &quot;443:443&quot; restart: always volumes: - ./typecho:/app - ./typecho.conf:/etc/nginx/conf.d/default.conf - logs:/var/log/nginx - /etc/ssl:/etc/ssl - /etc/letsencrypt:/etc/letsencrypt links: - php-fpm depends_on: - php-fpm php-fpm: image: scofieldpeng/php:7.2.3-fpm restart: always container_name: app_php-fpm volumes: - ./typecho:/app links: - db depends_on: - db db: image: mysql:5.7.21 restart: always container_name: app_db ports: - 7878:3306 volumes: - mysqldb:/var/lib/mysql - logs:/var/logs/mysql - /etc/mysql/mysqld.cnf:/etc/mysql/mysql.conf.d/mysqld.cnf env_file: - mysql.envvolumes: logs: driver: local-persist driver_opts: mountpoint: /data/back/ mysqldb: driver: local-persist driver_opts: mountpoint: /data/app/mysql 12mkdir /etc/mysql vim /etc/mysql/mysqld.cnf 我的mysqld.cnf 12345678910[mysqld]pid-file = /var/run/mysqld/mysqld.pidsocket = /var/run/mysqld/mysqld.sockdatadir = /var/lib/mysql#log-error = /var/log/mysql/error.log# By default we only accept connections from localhost#bind-address = 127.0.0.1# Disabling symbolic-links is recommended to prevent assorted security riskssymbolic-links=0max_allowed_packet=400M 然后运行 1docker-compose up -d 开通对应的防火墙端口 12iptables -A INPUT -p tcp -m multiport --dports 80,443,7878 -j ACCEPTiptables -A INPUT -p tcp -m multiport --sports 80,443,7878 -j ACCEPT docker inspect app_db 查看数据库的ip地址 开始访问,做初始化配置1http://192.168.224.12 这时候会提示手动创建config.inc.php文件。 然后进入typecho目录 vim config.inc.php 文件 123456789101112131415161718192021222324252627282930313233343536373839404142434445&lt;?php/** * Typecho Blog Platform * * @copyright Copyright (c) 2008 Typecho team (http://www.typecho.org) * @license GNU General Public License 2.0 * @version $Id$ *//** 定义根目录 */define('__TYPECHO_ROOT_DIR__', dirname(__FILE__));/** 定义插件目录(相对路径) */define('__TYPECHO_PLUGIN_DIR__', '/usr/plugins');/** 定义模板目录(相对路径) */define('__TYPECHO_THEME_DIR__', '/usr/themes');/** 后台路径(相对路径) */define('__TYPECHO_ADMIN_DIR__', '/admin/');/** 设置包含路径 */@set_include_path(get_include_path() . PATH_SEPARATOR .__TYPECHO_ROOT_DIR__ . '/var' . PATH_SEPARATOR .__TYPECHO_ROOT_DIR__ . __TYPECHO_PLUGIN_DIR__);/** 载入API支持 */require_once 'Typecho/Common.php';/** 程序初始化 */Typecho_Common::init();/** 定义数据库参数 */$db = new Typecho_Db('Pdo_Mysql', 'typecho_');$db-&gt;addServer(array ( 'host' =&gt; '172.20.0.2', 'user' =&gt; 'root', 'password' =&gt; 'Mysqlpass', 'charset' =&gt; 'utf8', 'port' =&gt; '3306', 'database' =&gt; 'typecho', 'engine' =&gt; 'InnoDB',), Typecho_Db::READ | Typecho_Db::WRITE);Typecho_Db::set($db); 然后回到网页上开始安装 最后Typecho 安装好后，默认的后台路径是”你的域名/admin“，为了提高安全性，把访问路径设置为“你的域名/自定义文件夹”。网站根目录下的config.inc.php文件里，找到： 后台路径(相对路径) define(‘TYPECHO_ADMIN_DIR‘, ‘/admin/‘); 把这个/admin/路径改成自己想要的路径就行了，同时把网站中的admin文件夹改成相同的名字。重新建立个admin文件夹，建立index.html文件，里面可以随意写嘲讽内容。","link":"/2020/08/02/docker-compose%E4%B8%80%E9%94%AE%E9%83%A8%E7%BD%B2typecho/"},{"title":"Hello World","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new &quot;My New Post&quot; More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","link":"/2020/08/02/hello-world/"},{"title":"","text":"1,linux下安装node.js Node.js 官网： 1https://nodejs.org 下载Node.js： 可以去官网下载最新的版本 12345wget https://nodejs.org/dist/v4.4.3/node-v4.4.3-linux-x64.tar.xz #旧版本wget https://nodejs.org/dist/v12.14.0/node-v12.14.0-linux-x64.tar.xztar -xvf node-v12.14.0-linux-x64.tar.xz #解压tar 全局链接设置： 1234ln -s /root/node-v12.14.0-linux-x64/bin/node /usr/local/bin/nodeln -s /root/node-v12.14.0-linux-x64/bin/npm /usr/local/bin/npm 2,forever守护nodejs进程 客户端启动Node.js应用 12node app.js # 方法一npm start # 方法二 Express框架 这样可以正常启动应用，但是如果断开客户端连接，应用也就随之停止了。也就是说这样的启动方式没有给应用一个守护线程。 Forever可以解决这个问题！Forever可以守护Node.js应用，客户端断开的情况下，应用也能正常工作。 安装过Node.js后再安装forever，需要加-g参数，因为forever要求安装到全局环境下： 123[sudo] npm install forever -gln -s /root/node-v12.14.0-linux-x64/bin/forever /usr/local/bin/forever forever使用： 123456789101112131415161718192021# 启动forever start ./bin/www ＃最简单的启动方式forever start -l forever.log ./bin/www #指定forever日志输出文件，默认路径~/.foreverforever start -l forever.log -a ./bin/www #需要注意，如果第一次启动带日志输出文件，以后启动都需要加上 -a 参数，forever默认不覆盖原文件forever start -o out.log -e err.log ./bin/www ＃指定node.js应用的控制台输出文件和错误信息输出文件forever start -w ./bin/www #监听当前目录下文件改动，如有改动，立刻重启应用，不推荐的做法！如有日志文件，日志文件是频繁更改的# 重启forever restart ./bin/www ＃重启单个应用forever restart [pid] #根据pid重启单个应用forever restartall #重启所有应用# 停止（和重启很类似）forever stop ./bin/www ＃停止单个应用forever stop [pid] #根据pid停止单个应用forever stopall ＃停止所有应用# 查看forever守护的应用列表forever list","link":"/2020/08/02/linux%E4%B8%8B%E5%AE%89%E8%A3%85node.js/"},{"title":"linux搭建ipsec和xl2tpd","text":"[toc] linux搭建ipsec/xl2tpd1.先看看你的主机是否支持pptp，返回结果为yes就表示通过12modprobe ppp-compress-18 &amp;&amp; echo yesyes 2.是否开启了TUN123cat /dev/net/tun#返回结果为cat: /dev/net/tun: File descriptor in bad state。就表示通过 3.安装EPEL源12yum install -y epel-release 4.安装xl2tpd和libreswan12yum install -y xl2tpd libreswan lsof 5.编辑xl2tpd配置文件12345678910111213141516vim /etc/xl2tpd/xl2tpd.conf[global]port = 1701[lns default]ip range = 192.168.18.2-192.168.18.254local ip = 192.168.18.1require chap = yesrefuse pap = yesrequire authentication = yesname = l2tpdppp debug = yespppoptfile = /etc/ppp/options.xl2tpdlength bit = yes 6.编辑pppoptfile文件1234567891011121314151617vim /etc/ppp/options.xl2tpdipcp-accept-localipcp-accept-remoterequire-mschap-v2ms-dns 8.8.8.8ms-dns 8.8.4.4noccpauthhide-passwordidle 1800mtu 1410mru 1410nodefaultroutedebugproxyarpconnect-delay 5000 7.编辑ipsec配置文件 ipse.conf文件和/etc/ipsec.d/l2tp-ipsec.conf文件合在一起了12345678910111213141516171819202122232425262728293031323334vim /etc/ipsec.conf 主要修改leftid=&quot;自己的IP&quot;version 2.0config setup protostack=netkey nhelpers=0 uniqueids=no interfaces=%defaultroute virtual_private=%v4:10.0.0.0/8,%v4:192.168.0.0/16,%v4:172.16.0.0/12,%v4:!192.168.18.0/24conn l2tp-psk rightsubnet=vhost:%priv also=l2tp-psk-nonatconn l2tp-psk-nonat authby=secret pfs=no auto=add keyingtries=3 rekey=no ikelifetime=8h keylife=1h type=transport left=%defaultroute leftid=192.107.147.140 leftprotoport=17/1701 right=%any rightprotoport=17/%any dpddelay=40 dpdtimeout=130 dpdaction=clear sha2-truncbug=yes 8.编辑include的conf文件12vim /etc/ipsec.d/l2tp-ipsec.conf# 新建如下配置文文件，直接复制的话，前面是很多空格，在启动的时候会报错，需要将空格删除，换成tab的距离，距离相同。不能用空格！ 9.设置用户名密码1234567vim /etc/ppp/chap-secrets# Secrets for authentication using CHAP# client server secret IP addressesxiaobai l2tpd 123.yichen *gnvpn pptpd 123.yi *wnvpn * 123.yi * vpnuser * pass *说明：用户名[空格] service[空格] 密码[空格] 指定IP 10.设置预共享密钥PSK 新建如下文件123vim /etc/ipsec.d/default.secrets本机IP %any: PSK &quot;123.yi&quot; 192.168.11.95 %any: PSK “xxxxxxx” 11.CentOS7防火墙设置(重要)12345678iptables -t nat -A POSTROUTING -s 192.168.18.0/24 -j MASQUERADEiptables -t nat -A POSTROUTING -m policy --dir out --pol none -j MASQUERADEiptables -A INPUT -p udp -m multiport --dports 17,25,53,68,1701,500,4500 -j ACCEPTiptables -A INPUT -p udp -m multiport --sports 17,25,53,68,1701,500,4500 -j ACCEPTiptables -A INPUT -p tcp -m multiport --dports 1701,1723,500,4500 -j ACCEPTiptables -A INPUT -p tcp -m multiport --sports 1701,1723,500,4500 -j ACCEPT 12.IP_FORWARD 设置1vim /etc/sysctl.d/66-sysctl.conf 12345678910111213141516vm.swappiness = 0net.ipv4.neigh.default.gc_stale_time=120net.ipv4.conf.all.rp_filter=0net.ipv4.conf.default.rp_filter=0net.ipv4.conf.default.arp_announce = 2net.ipv4.conf.all.arp_announce=2net.ipv4.tcp_max_tw_buckets = 5000net.ipv4.tcp_syncookies = 1net.ipv4.tcp_max_syn_backlog = 1024net.ipv4.tcp_synack_retries = 2net.ipv4.conf.lo.arp_announce=2net.ipv4.ip_forward = 1net.ipv4.conf.default.accept_redirects = 0net.ipv4.conf.default.send_redirects = 0net.ipv4.conf.default.accept_source_route = 0 13.ipsec启动&amp;检查12systemctl enable ipsecsystemctl restart ipsec 14.检查12345678ipsec verify# 可能会出现类似如下情况：Checking rp_filter [ENABLED] /proc/sys/net/ipv4/conf/ens160/rp_filter [ENABLED] /proc/sys/net/ipv4/conf/ens192/rp_filter [ENABLED]# 这是内核参数没有生效，直接依次手动打开这些文件，将 1 改为 0# 然后重新执行检查，输出如下内容则OK： 15.xl2tpd启动12systemctl enable xl2tpdsystemctl restart xl2tpd 到此，服务端的搭建已经完成，然后就是使用客户端进行连接 二、问题总结1.以上步骤搭建好，账号密码生成之后连接上，但是无法上外网，也无法上内网，只能ping通vpn所在内网服务器注意第11步防火墙转发，一定要执行。自作聪明把防火墙关闭了。具体可查看/var/log/messages三、win7 X64位操作系统拨 L2TP VPN遇到的一点问题（788、789错误）在网上鼓捣了很久发现win7 x64位的操作系统拨L2tp总是出问题，不是788错误就是789 错误。总结一下网上的一些方法 windows+r 运行 输入 services.msc，查找ipsec policy agent 1.services.msc组策略里面的 IPsec Policy Agent 开机启动 注册表编辑器 2.注册表里面的 HKEY_LOCAL_MACHINE\\System\\CurrentControlSet\\Services\\Rasman\\Parameters.新建如下两个项（注意，如果已经有了，就直接修改值） 1）名称：ProhibitIpSec 值：1， 2）名称：AllowL2TPWeakCrypto 值：1。 我遇到的是788错误，修改完这些之后又显示是789错误，一直都没有好。这个方法2有个小选项大家得注意，网上很多人都没有指出这个小小的细节， 那就是新建ProhibitIpSec值的时候右键有两个选项，一个是DWORD（32位），一个是QWORD（64位），我的x64位的操作系统，必须得新建DWORD（32位）的这个，要不然随便怎么折腾，都不会成功的，这研究了大概好几天，翻阅了大量资料，看到的这个选项，希望可以帮助大家。","link":"/2020/08/02/linux%E6%90%AD%E5%BB%BAipsec%E5%92%8Cxl2tpd/"},{"title":"新文章","text":"","link":"/2020/08/02/%E6%96%B0%E6%96%87%E7%AB%A0/"}],"tags":[],"categories":[]}